rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		match /users/{userId} {
			// Only if own doc or the user is from the same room
			allow read: if authUidMatchesNoVerification(userId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.domain == resource.data.domain;
			allow update: if authUidMatchesResourceUid();
		}
		match /user_personal_data/{userId} {
			allow get, update: if authUidMatchesResourceUid();
			allow create: if authUidMatches(userId);
		}
		match /rooms/{domain} {
			allow get: if isMyDomain(domain);

			match /members/{userId} {
				allow read: if isMyDomain(domain);
				allow update: if isMyDomain(domain) && authUidMatches(userId);
			}
		}
		match /chats/{domain} {
			allow get, update: if isMyDomain(domain);
		}

		function isVerified() {
			return request.auth.token.email_verified == true || exists(/databases/$(database)/documents/users/$(request.auth.uid));
		}
		function authUidMatches(uid) {
			return request.auth != null && request.auth.uid == uid && isVerified();
		}
		function authUidMatchesNoVerification(uid) {
			return request.auth != null && request.auth.uid == uid;
		}
		function authUidMatchesResourceUid() {
		  	return resource != null && authUidMatches(resource.id) && isVerified();
		}
		function isMyDomain(domain) {
			return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.domain == domain && isVerified();
		}
	}
}
