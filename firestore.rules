rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		match /users/{userId} {
			allow read: if authUidMatchesNoVerification(userId);
		}
		match /reading/{userId} {
			allow read, write: if authUidMatches(userId);
		}
		match /rooms/{domain} {
			allow get: if isMyDomain(domain);

			match /members/{userId} {
				allow read: if isMyDomain(domain);
			}
			match /reports/{uid} {
				allow create: if isMyDomain(domain);
			}
		}
		match /chats/{domain} {
			allow get, update: if isMyDomain(domain);
		}
		match /{path=**}/reports/{uid} {
        	allow read, write: if isVerified() && isAdmin();
        }


		function isVerified() {
			return request.auth.token.email_verified == true || exists(/databases/$(database)/documents/users/$(request.auth.uid));
		}
		function authUidMatches(uid) {
			return request.auth != null && request.auth.uid == uid && isVerified();
		}
		function authUidMatchesNoVerification(uid) {
			return request.auth != null && request.auth.uid == uid;
		}
		/*function authUidMatchesResourceId() {
		  	return resource != null && authUidMatches(resource.id) && isVerified();
		}*/
		function isMyDomain(domain) {
			return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.domain == domain && isVerified();
		}
		function isAdmin() {
			return request.auth.token.email == 'simon@job-tunnel.com' || request.auth.token.email == 'simon@decompresso.fr' || request.auth.token.email == 'annabelle@job-tunnel.com' || request.auth.token.email == 'annabelle@decompresso.fr' ;
		}
	}
}
